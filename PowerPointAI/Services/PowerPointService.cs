using System.Text.Json;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Presentation;
using A = DocumentFormat.OpenXml.Drawing;
using McpOrchestrator.Models;

namespace McpOrchestrator.Services
{
    public class PowerPointService
    {
        public string GeneratePpt(McpResponse summaryResponse, string filePath)
        {
            // Parse JSON (from Summarizer Agent output)
            var summary = JsonSerializer.Deserialize<SummaryModel>(summaryResponse.Output);

            using (PresentationDocument presentationDoc =
                PresentationDocument.Create(filePath, PresentationDocumentType.Presentation))
            {
                PresentationPart presentationPart = presentationDoc.AddPresentationPart();
                presentationPart.Presentation = new Presentation();

                SlideMasterPart slideMasterPart = presentationPart.AddNewPart<SlideMasterPart>();
                slideMasterPart.SlideMaster = new SlideMaster(new CommonSlideData(new ShapeTree()));
                SlideLayoutPart titleLayoutPart = slideMasterPart.AddNewPart<SlideLayoutPart>();
                titleLayoutPart.SlideLayout = new SlideLayout(new CommonSlideData(new ShapeTree()));
                slideMasterPart.SlideLayoutIdList = new SlideLayoutIdList(
                    new SlideLayoutId() { Id = 1U, RelationshipId = presentationPart.GetIdOfPart(titleLayoutPart) });

                presentationPart.Presentation.SlideMasterIdList = new SlideMasterIdList(
                    new SlideMasterId() { Id = 1U, RelationshipId = presentationPart.GetIdOfPart(slideMasterPart) });

                // Create slide list
                presentationPart.Presentation.SlideIdList = new SlideIdList();

                uint slideId = 256;

                // Title slide
                AddSlide(presentationPart, titleLayoutPart, summary.Title, "Generated by Azure MCP Orchestrator", ref slideId);

                // Content slides
                foreach (var point in summary.KeyPoints)
                {
                    AddSlide(presentationPart, titleLayoutPart, "Insight", point, ref slideId);
                }

                presentationPart.Presentation.Save();
            }

            return filePath;
        }

        private void AddSlide(PresentationPart presentationPart, SlideLayoutPart layoutPart, string title, string body, ref uint slideId)
        {
            SlidePart slidePart = presentationPart.AddNewPart<SlidePart>();
            slidePart.Slide = new Slide(new CommonSlideData(new ShapeTree()));

            ShapeTree shapeTree = slidePart.Slide.CommonSlideData.ShapeTree;

            // Title
            Shape titleShape = new Shape(
                new NonVisualShapeProperties(
                    new NonVisualDrawingProperties() { Id = 2U, Name = "Title" },
                    new NonVisualShapeDrawingProperties(new A.ShapeLocks() { NoGrouping = true }),
                    new ApplicationNonVisualDrawingProperties(new PlaceholderShape())),
                new ShapeProperties(),
                new TextBody(
                    new A.BodyProperties(),
                    new A.ListStyle(),
                    new A.Paragraph(new A.Run(new A.Text(title)))));

            // Body
            Shape bodyShape = new Shape(
                new NonVisualShapeProperties(
                    new NonVisualDrawingProperties() { Id = 3U, Name = "Content" },
                    new NonVisualShapeDrawingProperties(new A.ShapeLocks() { NoGrouping = true }),
                    new ApplicationNonVisualDrawingProperties(new PlaceholderShape() { Index = 1 })),
                new ShapeProperties(),
                new TextBody(
                    new A.BodyProperties(),
                    new A.ListStyle(),
                    new A.Paragraph(new A.Run(new A.Text(body)))));

            shapeTree.Append(titleShape);
            shapeTree.Append(bodyShape);

            slidePart.Slide.Save();

            presentationPart.Presentation.SlideIdList.Append(
                new SlideId() { Id = slideId++, RelationshipId = presentationPart.GetIdOfPart(slidePart) });
        }
    }

    // Model to parse summarizer JSON
    public class SummaryModel
    {
        public string Title { get; set; } = "Untitled";
        public List<string> KeyPoints { get; set; } = new();
    }
}
